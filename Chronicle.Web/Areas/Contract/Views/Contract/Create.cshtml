@model Chronicle.Web.Areas.Contract.ContractViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .employee-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        background: #f9f9f9;
        position: relative;
        transition: all 0.3s ease;
    }

        .employee-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

    .employee-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        padding-bottom: 10px;
        border-bottom: 1px solid #e0e0e0;
    }

    .employee-name {
        font-weight: 600;
        font-size: 16px;
        color: #333;
    }

    .employee-role {
        color: #666;
        font-size: 14px;
        font-style: italic;
    }

    .employee-details {
        font-size: 14px;
        color: #555;
    }

        .employee-details .detail-row {
            margin-bottom: 5px;
        }

    .employee-actions {
        display: flex;
        gap: 5px;
    }

    .edit-employee, .remove-employee {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
        padding: 5px;
        transition: all 0.3s;
    }

    .edit-employee {
        color: #3c8dbc;
    }

        .edit-employee:hover {
            color: #2e6da4;
            transform: scale(1.2);
        }

    .remove-employee {
        color: #dc3545;
    }

        .remove-employee:hover {
            color: #c82333;
            transform: scale(1.2);
        }

    .no-employees-message {
        text-align: center;
        padding: 40px;
        color: #999;
        font-size: 16px;
        background: #f5f5f5;
        border-radius: 8px;
        border: 2px dashed #ddd;
    }

    .employee-section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #3c8dbc;
    }

    .employee-section-title {
        font-size: 18px;
        font-weight: 600;
        color: #333;
        margin: 0;
    }

    .add-employee-btn {
        background: #28a745;
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s;
    }

        .add-employee-btn:hover {
            background: #218838;
            transform: translateY(-1px);
        }
</style>

<section class="content-header">
    <div class="row">
        <div class="col-md-12" style="margin-bottom: 0px;">
            <style>
                .breadcrumb-item {
                    display: inline;
                    list-style: none;
                }
            </style>

            <h1 class="pull-left pagetitle" style="font-size: 22px; margin-top: 5px;">
                <ul style="padding-left: 0;">
                    <li class="breadcrumb-item">
                        <a href="/Home/Index">
                            <i class="fa-solid fa-house" aria-hidden="true"></i><span class="sr-only"></span>
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/Contract">
                            Contract
                        </a>
                        <i class="fas fa-angle-right" aria-hidden="true"></i>
                    </li>
                    <li class="breadcrumb-item active">
                        Create New Contract
                    </li>
                </ul>
            </h1>

            <a style="padding-left: 5px; font-size: 15px;" class="text-dark-gray hidden-print" data-trigger="focus" tabindex="0" role="button" data-toggle="popover" title="" data-placement="right" data-html="true" data-content="Companies can be used as a simple identifier field, or can be used to limit visibility of assets, users, etc if full company support is enabled in your Admin settings." data-original-title="More Info">
                <i class="far fa-life-ring" style="padding-top: 9px;" aria-hidden="true"></i>    <span class="sr-only">More Info</span>
            </a>
            <div class="pull-right">
                <a href="/Contract" class="btn btn-primary pull-right">
                    Back
                </a>
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div class="row">
        <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1 col-sm-12 col-sm-offset-0">
            <form id="create-form" class="form-horizontal" method="post" action="/Contract/Edit/@Model.ContractID" autocomplete="off" role="form" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="ContractID" />
                <input type="hidden" asp-for="TenantID" />

                <div class="box box-default">
                    <div class="box-header with-border">
                        <h3 class="box-title">@(Model.ContractID == 0 ? "Create Contract" : "Edit Contract")</h3>
                    </div>

                    <div class="box-body">
                        <!-- Basic Contract Information -->
                        <div class="form-group">
                            <label asp-for="ContractTitle" class="required-field col-md-3 control-label">Contract Title</label>
                            <div class="col-md-8 col-sm-12">
                                <input asp-for="ContractTitle" class="form-control" required />
                                <span asp-validation-for="ContractTitle" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="ContractExternalID" class="required-field col-md-3 control-label">Contract ID</label>
                            <div class="col-md-8 col-sm-12">
                                <input asp-for="ContractExternalID" class="form-control" required />
                                <span asp-validation-for="ContractExternalID" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="CompanyID" class="required-field col-md-3 control-label">Company</label>
                            <div class="col-md-8 col-sm-12">
                                <select asp-for="CompanyID" asp-items="Lookup.GetActiveCompanyItems()" id="CompanyID" name="CompanyID" class="form-control" value="@Model.CompanyID" required>
                                </select>
                                <span asp-validation-for="CompanyID" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="CompanyRoleID" class="required-field col-md-3 control-label">Company Role</label>
                            <div class="col-md-8 col-sm-12">
                                <select asp-for="CompanyRoleID" asp-items="Lookup.GetCompanyRoleItems()" id="CompanyRoleID" name="CompanyRoleID" class="form-control" value="@Model.CompanyRoleID" required>
                                </select>
                                <span asp-validation-for="CompanyRoleID" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="HierarchyLevelID" class="required-field col-md-3 control-label">Contract Hierarchy level</label>
                            <div class="col-md-8 col-sm-12">
                                <select asp-for="HierarchyLevelID" asp-items="Lookup.GetHierarchyLevelsItems()" id="HierarchyLevelID" name="HierarchyLevelID" class="form-control" value="@Model.HierarchyLevelID" required>
                                </select>
                                <span asp-validation-for="HierarchyLevelID" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label asp-for="Location" class="col-md-3 control-label">Location</label>
                            <div class="col-md-8 col-sm-12">
                                <input asp-for="Location" class="form-control"/>
                                <span asp-validation-for="Location" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="InspectionAgencyContractNumber" class="col-md-3 control-label">Inspection Agency Contract Number</label>
                            <div class="col-md-8 col-sm-12">
                                <input asp-for="InspectionAgencyContractNumber" class="form-control"/>
                                <span asp-validation-for="InspectionAgencyContractNumber" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="ManagingAgencyContractNumber" class="col-md-3 control-label">Managing Agency Contract Number</label>
                            <div class="col-md-8 col-sm-12">
                                <input asp-for="ManagingAgencyContractNumber" class="form-control"/>
                                <span asp-validation-for="ManagingAgencyContractNumber" class="text-danger"></span>
                            </div>
                        </div>


                        <div class="form-group ">
                            <label for="name" class="col-md-3 control-label">Active</label>
                            <div class="col-md-8 col-sm-12">
                                <div class="icheck-danger d-inline">
                                    <input type="checkbox" asp-for="IsActive" id="IsActive" name="IsActive" value="true">
                                </div>
                            </div>
                        </div>

                        <!-- Employee Assignment Section - Refactored -->
                        <div class="form-group">
                            <label class="col-md-3 control-label">Assigned Employees</label>
                            <div class="col-md-8 col-sm-12">
                                <div class="box box-info">
                                    <div class="box-body">
                                        <div class="employee-section-header">
                                            <h4 class="employee-section-title">Employee Assignments</h4>
                                            <button type="button" class="add-employee-btn" id="addEmployeeBtn">
                                                <i class="fa fa-plus"></i> Add Employee
                                            </button>
                                        </div>

                                        <div id="employeeAssignments">
                                          @*   @if (Model.ContractEmployees != null && Model.ContractEmployees.Any())
                                            {
                                                @foreach (var emp in Model.ContractEmployees)
                                                {
                                                    <div class="employee-card" data-employee-id="@emp.EmployeeID">
                                                        <!-- Employee card content will be rendered here -->
                                                    </div>
                                                    var emp2 = emp.EmployeeName;
                                                }
                                            } *@
                                        </div>

                                        <div id="noEmployeesMessage" class="no-employees-message"
                                             style="@(Model.ContractEmployees?.Any() == true ? "display:none;" : "")">
                                            <i class="fa fa-users fa-3x" style="color: #ddd; margin-bottom: 10px;"></i>
                                            <p>No employees assigned yet.</p>
                                            <p>Click "Add Employee" to assign employees to this contract.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="box-footer">
                        <div class="row">
                            <div class="col-md-3">
                                <a class="btn btn-link" href="/Contract">Cancel</a>
                            </div>
                            <div class="col-md-9 text-right">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Save
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<!-- Employee Assignment Modal -->
<div class="modal fade" id="employeeModal" tabindex="-1" role="dialog" aria-labelledby="employeeModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="employeeModalLabel">
                    <i class="fa fa-user-plus"></i> Assign Employee to Contract
                </h4>
            </div>
            <div class="modal-body">
                <form id="employeeForm">
                    <div class="form-group">
                        <label for="modalEmployeeID" class="required-field">Select Employee</label>
                        <select id="modalEmployeeID" name="employeeID" class="form-control select2" style="width: 100%;" required>
                            <option value="">-- Select Employee --</option>
                        </select>
                        <small class="text-muted">Only employees not already assigned to this contract are shown</small>
                    </div>

                    <div class="form-group">
                        <label for="modalRole">Role / Position</label>
                        <select id="modalRole" asp-items="Lookup.GetContractEmployeeRoleItems()" name="roleID" class="form-control select2" style="width: 100%;" required>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="modalLineManagerID">Line Manager</label>
                        <select id="modalLineManagerID" name="lineManagerID" class="form-control select2" style="width: 100%;">
                            <option value="">-- Select Line Manager --</option>
                        </select>
                        <small class="text-muted">Select the line manager for this employee assignment</small>
                    </div>

                    <div class="form-group">
                        <label for="modalDateActivated">Date Activated</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            <input type="date" id="modalDateActivated" name="dateActivated" class="form-control">
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="modalDateDeactivated">Date Deactivated</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            <input type="date" id="modalDateDeactivated" name="dateDeactivated" class="form-control">
                        </div>
                        <small class="text-muted">Leave blank if employee is still active</small>
                    </div>

                    <!-- Employee Preview Section -->
                    <div id="employeePreview" style="display: none; margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
                        <h5 style="margin-top: 0; color: #3c8dbc;">Employee Details</h5>
                        <div id="employeePreviewContent">
                            <!-- Employee details will be shown here -->
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    <i class="fa fa-times"></i> Cancel
                </button>
                <button type="button" class="btn btn-success" id="saveEmployeeBtn">
                    <i class="fa fa-check"></i> <span id="saveButtonText">Assign Employee</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    var employeeCounter = @(Model.ContractEmployees?.Count ?? 0);
    var assignedEmployees = [];
    var availableEmployees = [];
    var currentEditingCounter = null; // Track which employee is being edited

    // Initialize existing employees
    @if (Model.ContractEmployees != null && Model.ContractEmployees.Any())
    {
        <text>
            @foreach (var emp in Model.ContractEmployees)
            {
                @:assignedEmployees.push({
                @:contractEmployeeID: '@emp.ContractEmployeeID',
                @:employeeID: '@emp.EmployeeID',
                @:employeeName: '@Html.Raw(emp.EmployeeName ?? "")',
                @:roleID: '@emp.RoleID',
                @:role: '@Html.Raw(emp.Role ?? "")',
                @:lineManagerID: '@emp.LineManagerID',
                @:lineManagerName: '@Html.Raw(emp.LineManagerName ?? "")',
                @:dateActivated: '@emp.DateActivated?.ToString("yyyy-MM-dd")',
                @:dateDeactivated: '@emp.DateDeactivated?.ToString("yyyy-MM-dd")',
                @:isNewRecord: false,
                @:counter: employeeCounter++
                @:});
            }
        </text>
    }
        // alert(JSON.stringify(assignedEmployees));

        $(document).ready(function () {
            // Initialize Select2 for employee dropdown
            $('#modalEmployeeID').select2({
                placeholder: 'Search for an employee...',
                allowClear: true,
                dropdownParent: $('#employeeModal')
            });

            // Set default date to today
            $('#modalDateActivated').val(new Date().toISOString().split('T')[0]);

            // Load existing employees into display
            assignedEmployees.forEach(employee => {
                addEmployeeToDisplay(employee);
            });

            updateNoEmployeesMessage();
        });

    // Company change handler
    $('#CompanyID').change(function () {
        var companyId = $(this).val();
        if (companyId) {
            loadEmployeesByCompany(companyId);
        }
    });

    // Trigger on page load if company is selected
    if ($('#CompanyID').val()) {
        $('#CompanyID').trigger('change');
    }

    function loadEmployeesByCompany(companyId) {
        $.ajax({
            url: '/Employee/GetEmployeeByCompany/' + companyId,
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                availableEmployees = data;
                populateEmployeeDropdowns(data);
            },
            error: function (xhr, status, error) {
                console.error('Error loading employees:', error);
                toastr.error('Failed to load employees');
            }
        });
    }

    function populateEmployeeDropdowns(employees) {
        var contractManagerSelect = $('#modalLineManagerID');
        contractManagerSelect.empty();
        contractManagerSelect.append('<option value="">-- Select Line Manager --</option>');

        $.each(employees, function (index, item) {
            contractManagerSelect.append(`<option value="${item.employeeID}">${item.firstName} ${item.lastName}</option>`);
        });
    }

    // Add Employee Button Click
    $('#addEmployeeBtn').click(function () {
        var companyId = $('#CompanyID').val();
        if (!companyId) {
            toastr.warning('Please select a company first.');
            return;
        }

        // Reset for adding new employee
        currentEditingCounter = null;
        $('#employeeModalLabel').html('<i class="fa fa-user-plus"></i> Assign Employee to Contract');
        $('#saveButtonText').text('Assign Employee');

        // Reset form
        $('#employeeForm')[0].reset();
        $('#modalDateActivated').val(new Date().toISOString().split('T')[0]);
        $('#employeePreview').hide();

        // Populate employee dropdown with available employees
        updateModalEmployeeDropdown();
        resetModalForm();
        $('#employeeModal').modal('show');
    });

    // Edit Employee Function
    function editEmployee(counter) {
        var employee = assignedEmployees.find(emp => emp.counter === counter);
        if (!employee) return;

        var companyId = $('#CompanyID').val();
        if (!companyId) {
            toastr.warning('Please select a company first.');
            return;
        }

        // Set editing mode
        currentEditingCounter = counter;
        $('#employeeModalLabel').html('<i class="fa fa-edit"></i> Edit Employee Assignment');
        $('#saveButtonText').text('Update Employee');

        // Update employee dropdown to include current employee first
        updateModalEmployeeDropdownForEdit(employee.employeeID);

        // Then populate form with existing data (use setTimeout to ensure dropdown is populated)
        setTimeout(function () {
            $('#modalEmployeeID').val(employee.employeeID).trigger('change');
            $('#modalRole').val(employee.roleID);
            $('#modalLineManagerID').val(employee.lineManagerID);
            $('#modalDateActivated').val(employee.dateActivated);
            $('#modalDateDeactivated').val(employee.dateDeactivated);
        }, 100);

        $('#employeeModal').modal('show');
    }

    function updateModalEmployeeDropdown() {
        var modalEmployeeSelect = $('#modalEmployeeID');
        modalEmployeeSelect.empty();
        modalEmployeeSelect.append('<option value="">-- Select Employee --</option>');

        // Filter out already assigned employees
        var unassignedEmployees = availableEmployees.filter(emp =>
            !assignedEmployees.some(assigned => assigned.employeeID == emp.employeeID)
        );

        $.each(unassignedEmployees, function (index, item) {
            modalEmployeeSelect.append(`<option value="${item.employeeID}"
                            data-department="${item.department || 'N/A'}"
                            data-email="${item.email || 'N/A'}">
                            ${item.firstName} ${item.lastName} (${item.department || 'No Dept'})
                        </option>`);
        });

        // Refresh Select2
        modalEmployeeSelect.trigger('change');
    }

    function updateModalEmployeeDropdownForEdit(currentEmployeeID) {
        var modalEmployeeSelect = $('#modalEmployeeID');
        modalEmployeeSelect.empty();
        modalEmployeeSelect.append('<option value="">-- Select Employee --</option>');

        // Filter out already assigned employees except the current one being edited
        var availableForEdit = availableEmployees.filter(emp =>
            !assignedEmployees.some(assigned => assigned.employeeID == emp.employeeID) ||
            emp.employeeID == currentEmployeeID
        );

        $.each(availableForEdit, function (index, item) {
            modalEmployeeSelect.append(`<option value="${item.employeeID}"
                            data-department="${item.department || 'N/A'}"
                            data-email="${item.email || 'N/A'}">
                            ${item.firstName} ${item.lastName} (${item.department || 'No Dept'})
                        </option>`);
        });

        // Refresh Select2
        modalEmployeeSelect.trigger('change');
    }

    // Employee selection change - show preview
    $('#modalEmployeeID').change(function () {
        var selectedEmployeeId = $(this).val();
        if (selectedEmployeeId) {
            var selectedOption = $(this).find('option:selected');
            var department = selectedOption.data('department');
            var email = selectedOption.data('email');
            var name = selectedOption.text().split('(')[0].trim();

            $('#employeePreviewContent').html(`
                            <div class="row">
                                <div class="col-sm-6"><strong>Name:</strong> ${name}</div>
                                <div class="col-sm-6"><strong>Department:</strong> ${department}</div>
                            </div>
                            <div class="row">
                                <div class="col-sm-12"><strong>Email:</strong> ${email}</div>
                            </div>
                        `);
            $('#employeePreview').slideDown();
        } else {
            $('#employeePreview').slideUp();
        }
    });

    // Save Employee Button Click
    $('#saveEmployeeBtn').click(function () {
        var employeeID = $('#modalEmployeeID').val();

        if (!employeeID) {
            toastr.error('Please select an employee.');
            return;
        }

        var roleId = $('#modalRole option:selected').val();
        var employeeName = $('#modalEmployeeID option:selected').text().split('(')[0].trim();
        var roleName = $('#modalRole option:selected').text().split('(')[0].trim();
        var lineManagerID = $('#modalLineManagerID').val();
        var lineManagerName = $('#modalLineManagerID option:selected').text();
        var dateActivated = $('#modalDateActivated').val();
        var dateDeactivated = $('#modalDateDeactivated').val();

        // Validate dates
        if (dateDeactivated && dateActivated && dateDeactivated < dateActivated) {
            toastr.error('Deactivation date cannot be before activation date.');
            return;
        }

        if (currentEditingCounter !== null) {
            // Update existing employee
            var employeeIndex = assignedEmployees.findIndex(emp => emp.counter === currentEditingCounter);
            if (employeeIndex !== -1) {
                assignedEmployees[employeeIndex] = {
                    contractEmployeeID: employee.contractEmployeeID || 0,
                    employeeID: employeeID,
                    employeeName: employeeName,
                    roleID: roleId,
                    role: roleName,
                    lineManagerName: lineManagerName,
                    lineManagerID: lineManagerID,
                    dateActivated: dateActivated,
                    dateDeactivated: dateDeactivated,
                    isNewRecord: false,
                    counter: currentEditingCounter
                };

                // Remove old display and add updated one
                $(`.employee-card[data-counter="${currentEditingCounter}"]`).remove();
                addEmployeeToDisplay(assignedEmployees[employeeIndex]);

                toastr.success(`${employeeName} assignment has been updated.`);
            }
        } else {
            // Add new employee
            var employee = {
                contractEmployeeID: 0,
                employeeID: employeeID,
                employeeName: employeeName,
                roleID: roleId,
                role: roleName,
                lineManagerName: lineManagerName,
                lineManagerID: lineManagerID,
                dateActivated: dateActivated,
                dateDeactivated: dateDeactivated,
                isNewRecord: true,
                counter: employeeCounter++
            };

            assignedEmployees.push(employee);
            addEmployeeToDisplay(employee);
            toastr.success(`${employeeName} has been assigned to this contract.`);
        }

        updateNoEmployeesMessage();
        updateHiddenFields(); // Ensure hidden fields are properly indexed
        $('#employeeModal').modal('hide');
    });

    function addEmployeeToDisplay(employee) {
        var employeeHtml = `
                        <div class="employee-card" data-counter="${employee.counter}">
                            <div class="employee-header">
                                <div>
                                    <div class="employee-name">
                                        <i class="fa fa-user-circle"></i> ${employee.employeeName}
                                    </div>
                                    <div class="employee-role">${employee.role || 'No Role Specified'}</div>
                                </div>
                                <div class="employee-actions">
                                    <button type="button" class="edit-employee" onclick="editEmployee(${employee.counter})" title="Edit employee">
                                        <i class="fa fa-edit"></i>
                                    </button>
                                    <button type="button" class="remove-employee" onclick="removeEmployee(${employee.counter})" title="Remove employee">
                                        <i class="fa fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="employee-details">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="detail-row">
                                            <i class="fa fa-calendar-check-o text-success"></i>
                                            <strong>Activated:</strong> ${employee.dateActivated || 'Not Set'}
                                        </div>
                                    </div>
                                    ${employee.dateDeactivated ? `
                                    <div class="col-sm-6">
                                        <div class="detail-row">
                                            <i class="fa fa-calendar-times-o text-danger"></i>
                                            <strong>Deactivated:</strong> ${employee.dateDeactivated}
                                        </div>
                                    </div>
                                    ` : ''}
                                    ${employee.lineManagerName && employee.lineManagerName !== '-- Select Line Manager --' ? `
                                    <div class="col-sm-6">
                                        <div class="detail-row">
                                            <i class="fa fa-user-o text-info"></i>
                                            <strong>Line Manager:</strong> ${employee.lineManagerName}
                                        </div>
                                    </div>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    `;

        $('#employeeAssignments').append(employeeHtml);

        // Add hidden fields after appending the card
        updateHiddenFields();
    }

    function updateHiddenFields() {
        // Remove all existing hidden fields
        $('#employeeAssignments input[type="hidden"]').remove();

        // Re-add hidden fields with proper sequential indexing
        assignedEmployees.forEach(function (employee, index) {
            var hiddenFieldsHtml = `
                    <input type="hidden" name="ContractEmployees[${index}].ContractEmployeeID" value="${employee.contractEmployeeID || 0}" />
                    <input type="hidden" name="ContractEmployees[${index}].EmployeeID" value="${employee.employeeID}" />
                    <input type="hidden" name="ContractEmployees[${index}].Role" value="${employee.role || ''}" />
                    <input type="hidden" name="ContractEmployees[${index}].RoleID" value="${employee.roleID || ''}" />
                    <input type="hidden" name="ContractEmployees[${index}].LineManagerID" value="${employee.lineManagerID || ''}" />
                    <input type="hidden" name="ContractEmployees[${index}].DateActivated" value="${employee.dateActivated || ''}" />
                    <input type="hidden" name="ContractEmployees[${index}].DateDeactivated" value="${employee.dateDeactivated || ''}" />
                    <input type="hidden" name="ContractEmployees[${index}].IsActive" value="true" />
                    <input type="hidden" name="ContractEmployees[${index}].IsNewRecord" value="${employee.isNewRecord}" />
                    <input type="hidden" name="ContractEmployees[${index}].TenantID" value="1" />
                `;
            $('#employeeAssignments').append(hiddenFieldsHtml);
        });
    }

    function removeEmployee(counter) {
        var employee = assignedEmployees.find(emp => emp.counter === counter);


        Swal.fire({
            title: 'Are you sure?',
            text: `Are you sure you want to remove ${employee.employeeName} from this contract ? `,
            icon: 'question',
            showCloseButton: true,
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes!',
            cancelButtonText: 'No'
        }).then((result) => {
            if (result.isConfirmed) {
                assignedEmployees = assignedEmployees.filter(emp => emp.counter !== counter);

                // Remove from display with animation
                $(`.employee-card[data-counter="${counter}"]`).fadeOut(300, function () {
                    $(this).remove();
                    updateNoEmployeesMessage();
                    updateHiddenFields(); // Update hidden fields after removal
                });

                toastr.success('Employee has been removed from the contract.');

            } else {
                return false;
            }
        });

        // if (confirm(`Are you sure you want to remove ${employee.employeeName} from this contract?`)) {
        //     // Remove from array
        //     assignedEmployees = assignedEmployees.filter(emp => emp.counter !== counter);

        //     // Remove from display with animation
        //     $(`.employee-card[data-counter="${counter}"]`).fadeOut(300, function () {
        //         $(this).remove();
        //         updateNoEmployeesMessage();
        //         updateHiddenFields(); // Update hidden fields after removal
        //     });

        //     toastr.success('Employee has been removed from the contract.');
        // }
    }

    function updateNoEmployeesMessage() {
        if (assignedEmployees.length === 0) {
            $('#noEmployeesMessage').fadeIn(300);
        } else {
            $('#noEmployeesMessage').hide();
        }
    }

    function resetModalForm() {
        // Reset the HTML form
        $('#employeeForm')[0].reset();

        // Reset all Select2 dropdowns to index 0 (first option)
        $('#modalEmployeeID').val('').trigger('change');
        $('#modalRole').val('').trigger('change');
        $('#modalLineManagerID').val('').trigger('change');

        // Set default date to today
        $('#modalDateActivated').val(new Date().toISOString().split('T')[0]);

        // Clear date deactivated
        $('#modalDateDeactivated').val('');

        // Hide employee preview section
        $('#employeePreview').hide();
        $('#employeePreviewContent').empty();

        // Clear any validation messages or error states
        $('.text-danger').text('');
        $('.form-group').removeClass('has-error');

        // Reset any custom styling or states
        $('.form-control').removeClass('error');
    }

    // Form validation before submit
    $('#create-form').submit(function (e) {
        // Debug: Log form data before submission
        console.log('Assigned Employees:', assignedEmployees);
        console.log('Hidden Fields:', $('#employeeAssignments input[type="hidden"]').length);

        // List all hidden field names and values for debugging
        $('#employeeAssignments input[type="hidden"]').each(function () {
            console.log($(this).attr('name') + ': ' + $(this).val());
        });

        // You can add additional validation here if needed
        if (assignedEmployees.length === 0) {
            if (!confirm('No employees are assigned to this contract. Do you want to continue?')) {
                e.preventDefault();
                return false;
            }
        }
    });
</script>