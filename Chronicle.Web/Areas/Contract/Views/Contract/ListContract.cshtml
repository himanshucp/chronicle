@model Chronicle.Web.PagedViewModel<Contract>
@using Chronicle.Entities
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Contract Management";
    
    // Calculate statistics
    var totalContracts = Model?.TotalCount ?? 0;
    var contractsOnPage = Model?.Items?.Count() ?? 0;
    var activeContracts = Model?.Items?.Where(c => c.IsActive == true).Count() ?? 0;
    var inactiveContracts = Model?.Items?.Where(c => c.IsActive == false).Count() ?? 0;
    var totalCompanies = Model?.Items?.Select(c => c.CompanyID).Distinct().Count() ?? 0;
    var totalProjects = Model?.Items?.Select(c => c.ProjectID).Distinct().Count() ?? 0;
    var totalContractValue = Model?.Items?.Where(c => c.ContractAmount.HasValue).Sum(c => c.ContractAmount.Value) ?? 0;
}

<style>
    /* Custom Enhancements for AdminLTE */
    .contract-stats {
        margin-bottom: 20px;
    }

    .info-box {
        display: block;
        min-height: 90px;
        background: #fff;
        width: 100%;
        box-shadow: 0 1px 1px rgba(0,0,0,0.1);
        border-radius: 2px;
        margin-bottom: 15px;
        transition: all 0.3s ease;
    }

        .info-box:hover {
            box-shadow: 0 3px 8px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

    .info-box-icon {
        border-top-left-radius: 2px;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 2px;
        display: block;
        float: left;
        height: 90px;
        width: 90px;
        text-align: center;
        font-size: 45px;
        line-height: 90px;
        background: rgba(0,0,0,0.2);
    }

    .info-box-content {
        padding: 5px 10px;
        margin-left: 90px;
    }

    .info-box-number {
        display: block;
        font-weight: bold;
        font-size: 18px;
    }

    .info-box-text {
        display: block;
        font-size: 14px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .bg-aqua { background-color: #00c0ef !important; }
    .bg-green { background-color: #00a65a !important; }
    .bg-yellow { background-color: #f39c12 !important; }
    .bg-red { background-color: #dd4b39 !important; }
    .bg-purple { background-color: #605ca8 !important; }
    .bg-orange { background-color: #ff851b !important; }

    .contract-filters {
        background: #fff;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 3px;
        box-shadow: 0 1px 1px rgba(0,0,0,0.1);
    }

    .contract-table .table > thead > tr > th {
        border-bottom: 2px solid #f4f4f4;
        font-weight: 600;
        background-color: #f9f9f9;
        font-size: 12px;
        text-transform: uppercase;
    }

    .contract-table .table > tbody > tr:hover {
        background-color: #f5f5f5;
    }

    .contract-table .table > tbody > tr > td {
        vertical-align: middle;
        padding: 8px;
        font-size: 13px;
    }

    .btn-action {
        padding: 4px 8px;
        margin: 0 2px;
        font-size: 12px;
        border-radius: 3px;
    }

    .contract-title {
        font-weight: 600;
        color: #3c8dbc;
    }

    .contract-info {
        display: flex;
        align-items: center;
        margin-bottom: 2px;
    }

    .contract-info i {
        margin-right: 5px;
        width: 12px;
        color: #666;
    }

    .company-badge {
        background: linear-gradient(45deg, #3c8dbc, #357ca5);
        color: white;
        padding: 2px 8px;
        border-radius: 10px;
        font-size: 11px;
        font-weight: bold;
    }

    .role-badge {
        background: linear-gradient(45deg, #00a65a, #008d4c);
        color: white;
        padding: 2px 8px;
        border-radius: 10px;
        font-size: 11px;
        font-weight: bold;
    }

    .hierarchy-badge {
        background: linear-gradient(45deg, #f39c12, #e08e0b);
        color: white;
        padding: 2px 8px;
        border-radius: 10px;
        font-size: 11px;
        font-weight: bold;
    }

    .location-badge {
        background: linear-gradient(45deg, #605ca8, #555299);
        color: white;
        padding: 2px 8px;
        border-radius: 10px;
        font-size: 11px;
        font-weight: bold;
    }

    .contract-id-badge {
        background: #f4f4f4;
        color: #666;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 11px;
        font-weight: bold;
    }

    .external-id-badge {
        background: #e3f2fd;
        color: #1976d2;
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 11px;
        font-weight: bold;
        border: 1px solid #bbdefb;
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: bold;
    }

    .status-active {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-inactive {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .contract-amount {
        font-weight: 600;
        color: #28a745;
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

        .empty-state i {
            font-size: 64px;
            color: #ddd;
            margin-bottom: 15px;
        }

    .search-section {
        background: #fff;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 3px;
        box-shadow: 0 1px 1px rgba(0,0,0,0.1);
    }

    .pagination-wrapper {
        padding: 15px;
        border-top: 1px solid #f4f4f4;
        background: #fafafa;
    }

    .table-header-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .view-toggle {
        display: flex;
        border: 1px solid #ddd;
        border-radius: 3px;
        overflow: hidden;
    }

    .view-toggle button {
        background: #fff;
        border: none;
        padding: 6px 12px;
        font-size: 12px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .view-toggle button.active {
            background: #3c8dbc;
            color: white;
        }

        .view-toggle button:hover:not(.active) {
            background: #f5f5f5;
        }

    /* Grid View Styles */
    .contract-grid {
        display: none;
    }

    .contract-card {
        background: #fff;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        padding: 20px;
        margin-bottom: 20px;
        transition: all 0.3s ease;
        border-left: 4px solid #3c8dbc;
    }

        .contract-card:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

    .contract-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .contract-card-title {
        font-size: 16px;
        font-weight: 600;
        color: #3c8dbc;
        margin: 0;
    }

    .contract-card-id {
        background: #f8f9fa;
        color: #666;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: bold;
    }

    .contract-card-body {
        margin-bottom: 15px;
    }

    .contract-detail {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        font-size: 13px;
    }

        .contract-detail i {
            width: 16px;
            margin-right: 8px;
            color: #666;
        }

    .contract-card-actions {
        display: flex;
        gap: 5px;
        justify-content: flex-end;
    }

    .filter-tabs {
        border-bottom: 1px solid #f4f4f4;
        margin-bottom: 15px;
    }

    .filter-tab {
        background: none;
        border: none;
        padding: 10px 15px;
        color: #666;
        font-weight: 500;
        border-bottom: 2px solid transparent;
        cursor: pointer;
    }

        .filter-tab.active {
            color: #3c8dbc;
            border-bottom-color: #3c8dbc;
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .info-box-icon {
            width: 70px;
            height: 70px;
            font-size: 35px;
            line-height: 70px;
        }

        .info-box-content {
            margin-left: 70px;
        }

        .table-responsive {
            font-size: 11px;
        }

        .btn-action {
            padding: 2px 4px;
            font-size: 10px;
        }

        /* Hide less important columns on mobile */
        .contract-table th:nth-child(3),
        .contract-table td:nth-child(3), /* External ID */
        .contract-table th:nth-child(6),
        .contract-table td:nth-child(6), /* Company Role */
        .contract-table th:nth-child(7),
        .contract-table td:nth-child(7) /* Hierarchy Level */
        {
            display: none;
        }
    }

    @@media (max-width: 480px) {
        /* Hide more columns on very small screens */
        .contract-table th:nth-child(6),
        .contract-table td:nth-child(6) /* Location */
        {
            display: none;
        }
    }
</style>

<!-- Content Header -->
<section class="content-header">
    <div class="row">
        <div class="col-md-12" style="margin-bottom: 0px;">
            <h1 class="pull-left pagetitle" style="font-size: 22px; margin-top: 5px;">
                <ul style="padding-left: 0;">
                    <li class="breadcrumb-item" style="display: inline; list-style: none;">
                        <a href="/Home/Index">
                            <i class="fa fa-home" aria-hidden="true"></i><span class="sr-only">Home</span>
                        </a>
                        <i class="fa fa-angle-right" aria-hidden="true"></i>
                    </li>
                    <li class="breadcrumb-item active" style="display: inline; list-style: none;">
                        Contract Management
                    </li>
                </ul>
            </h1>

            <div class="pull-right">
                <a href="/Contract/Create" class="btn btn-primary">
                    <i class="fa fa-plus"></i> Create New Contract
                </a>
            </div>
        </div>
    </div>
</section>

<!-- Main content -->
<section class="content">
    <!-- Statistics Cards -->
    <div class="row contract-stats">
        <div class="col-md-2 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-aqua"><i class="fa fa-file-text"></i></span>
                <div class="info-box-content">
                    <span class="info-box-text">Total Contracts</span>
                    <span class="info-box-number">@totalContracts</span>
                </div>
            </div>
        </div>

        <div class="col-md-2 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-green"><i class="fa fa-check-circle"></i></span>
                <div class="info-box-content">
                    <span class="info-box-text">Active</span>
                    <span class="info-box-number">@activeContracts</span>
                </div>
            </div>
        </div>

        <div class="col-md-2 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-yellow"><i class="fa fa-pause-circle"></i></span>
                <div class="info-box-content">
                    <span class="info-box-text">Inactive</span>
                    <span class="info-box-number">@inactiveContracts</span>
                </div>
            </div>
        </div>

        <div class="col-md-2 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-red"><i class="fa fa-building"></i></span>
                <div class="info-box-content">
                    <span class="info-box-text">Companies</span>
                    <span class="info-box-number">@totalCompanies</span>
                </div>
            </div>
        </div>

        <div class="col-md-2 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-purple"><i class="fa fa-tasks"></i></span>
                <div class="info-box-content">
                    <span class="info-box-text">Projects</span>
                    <span class="info-box-number">@totalProjects</span>
                </div>
            </div>
        </div>

        <div class="col-md-2 col-sm-6 col-xs-12">
            <div class="info-box">
                <span class="info-box-icon bg-orange"><i class="fa fa-dollar"></i></span>
                <div class="info-box-content">
                    <span class="info-box-text">Total Value</span>
                    <span class="info-box-number">@totalContractValue.ToString("C0")</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Search Section -->
    <div class="row">
        <div class="col-xs-12">
            <div class="search-section">
                <form method="get" action="/Contract" id="searchForm">
                    <input type="hidden" name="pageSize" id="hiddenPageSize" value="@Model.PageSize" />
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="input-group">
                                    <input type="text" name="searchTerm" value="@ViewBag.CurrentFilter" 
                                           class="form-control" placeholder="Search contracts by title, ID, location...">
                                    <span class="input-group-btn">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <select class="form-control" id="statusFilter">
                                    <option value="">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <select class="form-control" id="companyFilter">
                                    <option value="">All Companies</option>
                                    @if (Model.Items != null)
                                    {
                                        @foreach (var companyId in Model.Items.Select(c => c.CompanyID).Distinct().OrderBy(c => c))
                                        {
                                            var companyName = Cache.Companies.ContainsKey(companyId) ? Cache.Companies[companyId].Name : $"Company {companyId}";
                                            <option value="@companyId">@companyName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <select class="form-control" id="locationFilter">
                                    <option value="">All Locations</option>
                                    @if (Model.Items != null)
                                    {
                                        @foreach (var location in Model.Items.Select(c => c.Location).Distinct().Where(l => !string.IsNullOrEmpty(l)).OrderBy(l => l))
                                        {
                                            <option value="@location">@location</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <select class="form-control" id="pageSizeSelect" onchange="changePageSize(this.value)">
                                    @{
                                        var pageSizeOptions = new[] { 5, 10, 25, 50, 100 };
                                    }
                                    @foreach (var pageSize in pageSizeOptions)
                                    {
                                        if (Model.PageSize == pageSize)
                                        {
                                             <option value="@pageSize" selected>@pageSize per page</option>
                                        } else
                                        {
                                            <option value="@pageSize">@pageSize per page</option>
                                        }
                                       
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-1">
                            <button type="button" class="btn btn-default btn-block" id="clearFilters">
                                <i class="fa fa-refresh"></i>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Contract List -->
    <div class="row">
        <div class="col-xs-12">
            <div class="box box-primary contract-table">
                <div class="box-header with-border">
                    <div class="table-header-actions">
                        <h3 class="box-title">
                            <i class="fa fa-file-text"></i> Contracts (@totalContracts total)
                        </h3>
                        <div class="view-toggle">
                            <button type="button" class="active" id="tableViewBtn">
                                <i class="fa fa-table"></i> Table
                            </button>
                            <button type="button" id="gridViewBtn">
                                <i class="fa fa-th"></i> Grid
                            </button>
                        </div>
                    </div>
                    <div class="box-tools pull-right">
                        <button class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>

                <!-- Filter Tabs -->
                <div class="filter-tabs">
                    <button class="filter-tab active" data-filter="all">All (@totalContracts)</button>
                    <button class="filter-tab" data-filter="active">Active (@activeContracts)</button>
                    <button class="filter-tab" data-filter="inactive">Inactive (@inactiveContracts)</button>
                </div>

                <div class="box-body">
                    @if (Model.Items != null && Model.Items.Any())
                    {
                        <!-- Table View -->
                        <div id="tableView" class="table-responsive">
                            <table class="table table-bordered table-striped" id="contractsTable">
                                <thead>
                                    <tr>
                                        <th width="80">Contract ID</th>
                                        <th width="100">External ID</th>
                                        <th>Title</th>
                                        <th>Company</th>
                                        <th>Location</th>
                                        <th>Company Role</th>
                                        <th>Hierarchy Level</th>
                                        <th width="80">Status</th>
                                        <th width="120">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var contract in Model.Items)
                                    {
                                        var companyName = Cache.Companies.ContainsKey(contract.CompanyID) ? Cache.Companies[contract.CompanyID].Name : "N/A";
                                        var companyRole = Cache.CompanyRoles.ContainsKey(contract.CompanyRoleID) ? Cache.CompanyRoles[contract.CompanyRoleID].RoleName : "N/A";
                                        var hierarchyLevel = Cache.HierarchyLevels.ContainsKey(contract.HierarchyLevelID) ? Cache.HierarchyLevels[contract.HierarchyLevelID].LevelName : "N/A";
                                        
                                        <tr data-status="@(contract.IsActive == true ? "active" : "inactive")" 
                                            data-company="@contract.CompanyID" 
                                            data-location="@contract.Location">
                                            <td>
                                                <span class="contract-id-badge">#@contract.ContractID</span>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(contract.ContractExternalID))
                                                {
                                                    <span class="external-id-badge">@contract.ContractExternalID</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="contract-title">@contract.ContractTitle</div>
                                                @if (contract.ContractAmount.HasValue)
                                                {
                                                    <div class="contract-amount">@contract.ContractAmount.Value.ToString("C")</div>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(companyName) && companyName != "N/A")
                                                {
                                                    <span class="company-badge">@companyName</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(contract.Location))
                                                {
                                                    <span class="location-badge">@contract.Location</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(companyRole) && companyRole != "N/A")
                                                {
                                                    <span class="role-badge">@companyRole</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(hierarchyLevel) && hierarchyLevel != "N/A")
                                                {
                                                    <span class="hierarchy-badge">@hierarchyLevel</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (contract.IsActive == true)
                                                {
                                                    <span class="status-badge status-active">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="status-badge status-inactive">Inactive</span>
                                                }
                                            </td>
                                            <td>
                                                <a href="/Contract/Edit/@contract.ContractID" 
                                                   class="btn btn-warning btn-xs btn-action" title="Edit Contract">
                                                    <i class="fa fa-edit"></i>
                                                </a>
                                                <button onclick="viewContract(@contract.ContractID)" 
                                                        class="btn btn-info btn-xs btn-action" title="View Contract">
                                                    <i class="fa fa-eye"></i>
                                                </button>
                                                <button onclick="deleteContract(@contract.ContractID, '@Html.Raw(Html.Encode(contract.ContractTitle))')" 
                                                        class="btn btn-danger btn-xs btn-action" title="Delete Contract">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                                <button onclick="toggleContractStatus(@contract.ContractID, @(contract.IsActive == true ? "false" : "true"))" 
                                                        class="btn @(contract.IsActive == true ? "btn-warning" : "btn-success") btn-xs btn-action" 
                                                        title="@(contract.IsActive == true ? "Deactivate" : "Activate")">
                                                    <i class="fa @(contract.IsActive == true ? "fa-pause" : "fa-play")"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Grid View -->
                        <div id="gridView" class="contract-grid">
                            <div class="row">
                                @foreach (var contract in Model.Items)
                                {
                                    var companyName = Cache.Companies.ContainsKey(contract.CompanyID) ? Cache.Companies[contract.CompanyID].Name : "N/A";
                                    var companyRole = Cache.CompanyRoles.ContainsKey(contract.CompanyRoleID) ? Cache.CompanyRoles[contract.CompanyRoleID].RoleName : "N/A";
                                    var hierarchyLevel = Cache.HierarchyLevels.ContainsKey(contract.HierarchyLevelID) ? Cache.HierarchyLevels[contract.HierarchyLevelID].LevelName : "N/A";
                                    
                                    <div class="col-md-6 col-lg-4" data-status="@(contract.IsActive == true ? "active" : "inactive")" 
                                         data-company="@contract.CompanyID" data-location="@contract.Location">
                                        <div class="contract-card">
                                            <div class="contract-card-header">
                                                <h4 class="contract-card-title">@contract.ContractTitle</h4>
                                                <span class="contract-card-id">#@contract.ContractID</span>
                                            </div>
                                            <div class="contract-card-body">
                                                @if (!string.IsNullOrEmpty(contract.ContractExternalID))
                                                {
                                                    <div class="contract-detail">
                                                        <i class="fa fa-tag"></i>
                                                        <span>@contract.ContractExternalID</span>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(companyName) && companyName != "N/A")
                                                {
                                                    <div class="contract-detail">
                                                        <i class="fa fa-building"></i>
                                                        <span>@companyName</span>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(contract.Location))
                                                {
                                                    <div class="contract-detail">
                                                        <i class="fa fa-map-marker"></i>
                                                        <span>@contract.Location</span>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(companyRole) && companyRole != "N/A")
                                                {
                                                    <div class="contract-detail">
                                                        <i class="fa fa-user"></i>
                                                        <span>@companyRole</span>
                                                    </div>
                                                }
                                                @if (!string.IsNullOrEmpty(hierarchyLevel) && hierarchyLevel != "N/A")
                                                {
                                                    <div class="contract-detail">
                                                        <i class="fa fa-sitemap"></i>
                                                        <span>@hierarchyLevel</span>
                                                    </div>
                                                }
                                                @if (contract.ContractAmount.HasValue)
                                                {
                                                    <div class="contract-detail">
                                                        <i class="fa fa-dollar"></i>
                                                        <span class="contract-amount">@contract.ContractAmount.Value.ToString("C")</span>
                                                    </div>
                                                }
                                                <div class="contract-detail">
                                                    <i class="fa fa-info-circle"></i>
                                                    @if (contract.IsActive == true)
                                                    {
                                                        <span class="status-badge status-active">Active</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="status-badge status-inactive">Inactive</span>
                                                    }
                                                </div>
                                            </div>
                                            <div class="contract-card-actions">
                                                <a href="/Contract/Edit/@contract.ContractID" 
                                                   class="btn btn-warning btn-sm" title="Edit Contract">
                                                    <i class="fa fa-edit"></i> Edit
                                                </a>
                                                <button onclick="viewContract(@contract.ContractID)" 
                                                        class="btn btn-info btn-sm" title="View Contract">
                                                    <i class="fa fa-eye"></i> View
                                                </button>
                                                <button onclick="deleteContract(@contract.ContractID, '@Html.Raw(Html.Encode(contract.ContractTitle))')" 
                                                        class="btn btn-danger btn-sm" title="Delete Contract">
                                                    <i class="fa fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fa fa-file-text"></i>
                            <h4>No contracts found</h4>
                            @if (!string.IsNullOrEmpty(ViewBag.CurrentFilter as string))
                            {
                                <p>No contracts match your search criteria "<strong>@ViewBag.CurrentFilter</strong>".</p>
                                <a href="/Contract" class="btn btn-default">Clear Search</a>
                            }
                            else
                            {
                                <p>Start by creating your first contract.</p>
                                <a href="/Contract/Create" class="btn btn-primary">
                                    <i class="fa fa-plus"></i> Create Contract
                                </a>
                            }
                        </div>
                    }
                </div>

                @if (Model.Items != null && Model.Items.Any() && Model.TotalPages > 1)
                {
                    <!-- Pagination -->
                    <div class="pagination-wrapper">
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="dataTables_info">
                                    Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount) of @Model.TotalCount contracts
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <ul class="pagination pagination-sm pull-right">
                                    <li class="@(Model.CurrentPage == 1 ? "disabled" : "")">
                                        <a href="/Contract/?searchTerm=@ViewBag.CurrentFilter&page=1&pageSize=@Model.PageSize">&laquo;</a>
                                    </li>
                                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                    {
                                        <li class="@(i == Model.CurrentPage ? "active" : "")">
                                            <a href="/Contract/?searchTerm=@ViewBag.CurrentFilter&page=@i&pageSize=@Model.PageSize">@i</a>
                                        </li>
                                    }
                                    <li class="@(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                        <a href="/Contract/?searchTerm=@ViewBag.CurrentFilter&page=@Model.TotalPages&pageSize=@Model.PageSize">&raquo;</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@section Scripts {

    <script>
        $(document).ready(function () {
            // View toggle functionality
            $('#tableViewBtn').click(function () {
                $(this).addClass('active');
                $('#gridViewBtn').removeClass('active');
                $('#tableView').show();
                $('#gridView').hide();
                localStorage.setItem('contractViewMode', 'table');
            });

            $('#gridViewBtn').click(function () {
                $(this).addClass('active');
                $('#tableViewBtn').removeClass('active');
                $('#tableView').hide();
                $('#gridView').show();
                localStorage.setItem('contractViewMode', 'grid');
            });

            // Remember view preference
            var savedView = localStorage.getItem('contractViewMode');
            if (savedView === 'grid') {
                $('#gridViewBtn').click();
            }

            // Filter tabs functionality
            $('.filter-tab').click(function () {
                $('.filter-tab').removeClass('active');
                $(this).addClass('active');

                var filter = $(this).data('filter');
                var tableRows = $('#contractsTable tbody tr');
                var gridCards = $('#gridView .col-md-6');

                if (filter === 'all') {
                    tableRows.show();
                    gridCards.show();
                } else {
                    tableRows.hide();
                    gridCards.hide();
                    tableRows.filter('[data-status="' + filter + '"]').show();
                    gridCards.filter('[data-status="' + filter + '"]').show();
                }
            });

            // Status filter functionality
            $('#statusFilter').change(function () {
                var selectedStatus = $(this).val().toLowerCase();
                filterContracts();
            });

            // Company filter functionality
            $('#companyFilter').change(function () {
                filterContracts();
            });

            // Location filter functionality
            $('#locationFilter').change(function () {
                filterContracts();
            });

            // Clear filters
            $('#clearFilters').click(function () {
                $('#statusFilter').val('');
                $('#companyFilter').val('');
                $('#locationFilter').val('');
                $('input[name="searchTerm"]').val('');
                $('#contractsTable tbody tr').show();
                $('#gridView .col-md-6').show();
            });

            // Combined filter function
            function filterContracts() {
                var selectedStatus = $('#statusFilter').val().toLowerCase();
                var selectedCompany = $('#companyFilter').val();
                var selectedLocation = $('#locationFilter').val();
                
                var tableRows = $('#contractsTable tbody tr');
                var gridCards = $('#gridView .col-md-6');

                tableRows.each(function () {
                    var row = $(this);
                    var showRow = true;

                    if (selectedStatus && row.data('status') !== selectedStatus) {
                        showRow = false;
                    }
                    if (selectedCompany && row.data('company').toString() !== selectedCompany) {
                        showRow = false;
                    }
                    if (selectedLocation && row.data('location') !== selectedLocation) {
                        showRow = false;
                    }

                    if (showRow) {
                        row.show();
                    } else {
                        row.hide();
                    }
                });

                gridCards.each(function () {
                    var card = $(this);
                    var showCard = true;

                    if (selectedStatus && card.data('status') !== selectedStatus) {
                        showCard = false;
                    }
                    if (selectedCompany && card.data('company').toString() !== selectedCompany) {
                        showCard = false;
                    }
                    if (selectedLocation && card.data('location') !== selectedLocation) {
                        showCard = false;
                    }

                    if (showCard) {
                        card.show();
                    } else {
                        card.hide();
                    }
                });
            }

            // Tooltip initialization
            $('[title]').tooltip();

            // Search functionality enhancement
            $('input[name="searchTerm"]').on('keypress', function (e) {
                if (e.which === 13) { // Enter key
                    $(this).closest('form').submit();
                }
            });
        });

        // Change page size function
        function changePageSize(pageSize) {
            $('#hiddenPageSize').val(pageSize);
            $('#searchForm').submit();
        }

        // View contract function
        function viewContract(contractId) {
            Swal.fire({
                title: 'Contract Details',
                text: 'Contract viewing functionality would be implemented here.',
                icon: 'info',
                confirmButtonColor: '#3c8dbc'
            });
        }

        // Toggle contract status with SweetAlert
        function toggleContractStatus(contractId, activate) {
            var action = activate === 'true' ? 'activate' : 'deactivate';
            var actionText = activate === 'true' ? 'Activate' : 'Deactivate';
            var iconType = activate === 'true' ? 'question' : 'warning';
            var confirmButtonColor = activate === 'true' ? '#00a65a' : '#f39c12';

            Swal.fire({
                title: actionText + ' Contract?',
                text: 'Are you sure you want to ' + action + ' this contract?',
                icon: iconType,
                showCancelButton: true,
                confirmButtonColor: confirmButtonColor,
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, ' + action + '!',
                cancelButtonText: 'Cancel',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading
                    Swal.fire({
                        title: actionText.slice(0, -1) + 'ing Contract...',
                        text: 'Please wait while we process your request.',
                        icon: 'info',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Simulate API call - replace with actual endpoint
                    setTimeout(() => {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Contract has been ' + action + 'd successfully.',
                            icon: 'success',
                            confirmButtonColor: '#00a65a',
                            timer: 2000,
                            timerProgressBar: true
                        }).then(() => {
                            location.reload();
                        });
                    }, 1000);
                }
            });
        }

        // Delete contract with SweetAlert
        function deleteContract(contractId, contractTitle) {
            Swal.fire({
                title: 'Delete Contract?',
                html: `Are you sure you want to delete <strong>"${contractTitle}"</strong>?<br><br><small class="text-muted">This action cannot be undone!</small>`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dd4b39',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, delete!',
                cancelButtonText: 'Cancel',
                reverseButtons: true,
                focusCancel: true
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading
                    Swal.fire({
                        title: 'Deleting Contract...',
                        text: 'Please wait while we process your request.',
                        icon: 'info',
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    // Simulate API call - replace with actual endpoint
                    setTimeout(() => {
                        Swal.fire({
                            title: 'Deleted!',
                            text: 'Contract has been deleted successfully.',
                            icon: 'success',
                            confirmButtonColor: '#00a65a',
                            timer: 2000,
                            timerProgressBar: true
                        }).then(() => {
                            location.reload();
                        });
                    }, 1000);
                }
            });
        }
    </script>

 
}